kernel,servers/pm and servers/sched are modified.
The kernel modification is very simple. Originally SCHEDULING_NO_QUANTUM is sent only when a process has run out of its quantum, but not when it is blocked, and sched is not called when a process is blocked. My mod changes it to sending SCHEDULING_NO_QUANTUM whenever a process stops running( when out of quantum or blocked by I/O ). Whether the process has run out of quantum or has been blocked is recorded in SCHEDULING_QUANTUM and sent alongside the message. Of course this slows down the OS considerably, but correctness and ease of implementation are favored this time.
The servers/pm mod is just an additional line of printf() during OS booting, so that I know sched is up and running.
In the modified servers/sched, all LOTTERIED ( has no SYS_PROC flag set ) processes are sent to queue 15, unless it is chosen as the lucky one during draw_lots(), when it is sent to queue 14 as the lucky one and the previous lucky process is sent back to queue 15. If no error happens there is always one and only one LOTTERIED runnable process in queue 14. If an error hashappened during a sys_schedule() call, there may be no LOTTERIED process in queue 14, but sched can recover from such a situation and put another process into queue 14 during the next draw_lots(). Whenever do_noquantum() is called, which now means that a process has stopped running because either it had run out of quantum or it had been blocked, draw_lots() is called. If a LOTTERIED process has run out of quantum then it is directly sent to queue 15 and does not participate in the lottery. The total number of tickets is not tracked in a persistent variable, butcalculated in every draw_lots() call, which is much less likely to be inconsistent. setpriority() is used to adjust tickets. The random seed is set using a fixed number, because calling time services during sched initialization would introduce a deadlock, and how many times draw_lots() has been called is already undeterminable from the perspective of a user process.
sched.patch is tested under Minix only. If the patch doesn't work, please try the files in backup.rar. You only need to overwrite files accordingly.
