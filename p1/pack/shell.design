minix_shell.c compiles and runs on both the linux testbed and the minix VM.
On test bed you need to use Ctrl+Backspace to delete characters.
The command line is read at once, then during parsing a child processes is forked whenever enough information is obtained to correctedly excute it. Building an explicit tree out of the command line is avoided, so there are much less states to manage. One exception is that the & meta-character requires another pass to identify. But even with this special case, my current implementation should be simpler than building an explicit tree and then walking it. While frequently used, the "cd" command is not an executable, but a command implemented directly inside a shell, the functionality of which is not mentioned in the project requirement, so I haven't implemented "cd". The shell can't handle DOS/Windows style line endings under UNIX-like systems ("\r\n"). In case of sys/lib call errors, the name of the failed system/library call is shown, which in my opinion fulfills the project requirement. For example, a "command not found" error is shown as "failed to exec()". Child process termination is handled in a SIGCHLD handler. Daemon processes whose input is not redirected in the command are given a new pipe which is subsequently closed, so they don't interfere with the shell. Quotation marks are properly handled with UNIX convention. All required features are implemented, of which the code of unmentioned ones should be self-explanatory.

